  1. # Sonar Treasure Hunt
  2.
  3. import random
  4. import sys
  5. import math
  6.
  7. def getNewBoard():
  8.     # Create a new 60x15 board data structure.
  9.     board = []
 10.     for x in range(60): # The main list is a list of 60 lists.
 11.         board.append([])
 12.         for y in range(15): # Each list in the main list has
               15 single-character strings.
13.             # Use different characters for the ocean to make it more
                   readable.
 14.             if random.randint(0, 1) == 0:
 15.                 board[x].append('~')
 16.             else:
 17.                 board[x].append('`')
 18.     return board
 19.
 20. def drawBoard(board):
 21.     # Draw the board data structure.
 22.     tensDigitsLine = '    ' # Initial space for the numbers down the left
           side of the board
 23.     for i in range(1, 6):
 24.         tensDigitsLine += (' ' * 9) + str(i)
 25.
 26.     # Print the numbers across the top of the board.
 27.     print(tensDigitsLine)
 28.     print('   ' + ('0123456789' * 6))
 29.     print()
 30.
 31.     # Print each of the 15 rows.
 32.     for row in range(15):
 33.         # Single-digit numbers need to be padded with an extra space.
 34.         if row < 10:
 35.             extraSpace = ' '
 36.         else:
 37.             extraSpace = ''
 38.
 39.         # Create the string for this row on the board.
 40.         boardRow = ''
 41.         for column in range(60):
 42.             boardRow += board[column][row]
 43.
 44.         print('%s%s %s %s' % (extraSpace, row, boardRow, row))
 45.
 46.     # Print the numbers across the bottom of the board.
 47.     print()
 48.     print(' ' + ('0123456789' * 6))
 49.     print(tensDigitsLine)
 50.
 51. def getRandomChests(numChests):
 52.     # Create a list of chest data structures (two-item lists of x, y int
           coordinates).
 53.     chests = []
 54.     while len(chests) < numChests:
 55.         newChest = [random.randint(0, 59), random.randint(0, 14)]
 56.         if newChest not in chests: # Make sure a chest is not already
               here.
 57.             chests.append(newChest)
 58.     return chests
 59.
 60. def isOnBoard(x, y):
 61.     # Return True if the coordinates are on the board; otherwise, return
           False.
 62.     return x >= 0 and x <= 59 and y >= 0 and y <= 14
63.
 64. def makeMove(board, chests, x, y):
 65.     # Change the board data structure with a sonar device character.
           Remove treasure chests from the chests list as they are found.
 66.     # Return False if this is an invalid move.
 67.     # Otherwise, return the string of the result of this move.
 68.     smallestDistance = 100 # Any chest will be closer than 100.
 69.     for cx, cy in chests:
 70.         distance = math.sqrt((cx - x) * (cx - x) + (cy - y) * (cy - y))
 71.
 72.         if distance < smallestDistance: # We want the closest treasure
               chest.
 73.             smallestDistance = distance
 74.
 75.     smallestDistance = round(smallestDistance)
 76.
 77.     if smallestDistance == 0:
 78.         # xy is directly on a treasure chest!
 79.         chests.remove([x, y])
 80.         return 'You have found a sunken treasure chest!'
 81.     else:
 82.         if smallestDistance < 10:
 83.             board[x][y] = str(smallestDistance)
 84.             return 'Treasure detected at a distance of %s from the sonar
                   device.' % (smallestDistance)
 85.         else:
 86.             board[x][y] = 'X'
 87.             return 'Sonar did not detect anything. All treasure chests
                   out of range.'
 88.
 89. def enterPlayerMove(previousMoves):
 90.     # Let the player enter their move. Return a two-item list of int
           xy coordinates.
 91.     print('Where do you want to drop the next sonar device? (0-59 0-14)
           (or type quit)')
 92.     while True:
 93.         move = input()
 94.         if move.lower() == 'quit':
 95.             print('Thanks for playing!')
 96.             sys.exit()
 97.
 98.         move = move.split()
 99.         if len(move) == 2 and move[0].isdigit() and move[1].isdigit() and
               isOnBoard(int(move[0]), int(move[1])):
100.             if [int(move[0]), int(move[1])] in previousMoves:
101.                 print('You already moved there.')
102.                 continue
103.             return [int(move[0]), int(move[1])]
104.
105.         print('Enter a number from 0 to 59, a space, then a number from
               0 to 14.')
106.
107. def showInstructions():
108.     print('''Instructions:
109. You are the captain of the Simon, a treasure-hunting ship. Your current
       mission
110. is to use sonar devices to find three sunken treasure chests at the
       bottom of
111. the ocean. But you only have cheap sonar that finds distance, not
       direction.
112.
113. Enter the coordinates to drop a sonar device. The ocean map will be
       marked with
114. how far away the nearest chest is, or an X if it is beyond the sonar
       device's
115. range. For example, the C marks are where chests are. The sonar device
       shows a
116. 3 because the closest chest is 3 spaces away.
117.
118.                     1         2         3
119.           012345678901234567890123456789012
120.
121.         0 ~~~~`~```~`~``~~~``~`~~``~~~``~`~ 0
122.         1 ~`~`~``~~`~```~~~```~~`~`~~~`~~~~ 1
123.         2 `~`C``3`~~~~`C`~~~~`````~~``~~~`` 2
124.         3 ````````~~~`````~~~`~`````~`~``~` 3
125.         4 ~`~~~~`~~`~~`C`~``~~`~~~`~```~``~ 4
126.
127.           012345678901234567890123456789012
128.                     1         2         3
129. (In the real game, the chests are not visible in the ocean.)
130.
131. Press enter to continue...''')
132.     input()
133.
134.     print('''When you drop a sonar device directly on a chest, you
           retrieve it and the other
135. sonar devices update to show how far away the next nearest chest is. The
       chests
136. are beyond the range of the sonar device on the left, so it shows an X.
137.
138.                     1         2         3
139.           012345678901234567890123456789012
140.
141.         0 ~~~~`~```~`~``~~~``~`~~``~~~``~`~ 0
142.         1 ~`~`~``~~`~```~~~```~~`~`~~~`~~~~ 1
143.         2 `~`X``7`~~~~`C`~~~~`````~~``~~~`` 2
144.         3 ````````~~~`````~~~`~`````~`~``~` 3
145.         4 ~`~~~~`~~`~~`C`~``~~`~~~`~```~``~ 4
146.
147.           012345678901234567890123456789012
148.                     1         2         3
149.
150. The treasure chests don't move around. Sonar devices can detect treasure
       chests
151. up to a distance of 9 spaces. Try to collect all 3 chests before running
       out of
152. sonar devices. Good luck!
153.
154. Press enter to continue...''')
155.     input()
156.
157.
158.
159. print('S O N A R !')
160. print()
161. print('Would you like to view the instructions? (yes/no)')
162. if input().lower().startswith('y'):
163.     showInstructions()
164.
165. while True:
166.     # Game setup
167.     sonarDevices = 20
168.     theBoard = getNewBoard()
169.     theChests = getRandomChests(3)
170.     drawBoard(theBoard)
171.     previousMoves = []
172.
173.     while sonarDevices > 0:
174.         # Show sonar device and chest statuses.
175.         print('You have %s sonar device(s) left. %s treasure chest(s)
               remaining.' % (sonarDevices, len(theChests)))
176.
177.         x, y = enterPlayerMove(previousMoves)
178.         previousMoves.append([x, y]) # We must track all moves so that
               sonar devices can be updated.
179.
180.         moveResult = makeMove(theBoard, theChests, x, y)
181.         if moveResult == False:
182.             continue
183.         else:
184.             if moveResult == 'You have found a sunken treasure chest!':
185.                 # Update all the sonar devices currently on the map.
186.                 for x, y in previousMoves:
187.                     makeMove(theBoard, theChests, x, y)
188.             drawBoard(theBoard)
189.             print(moveResult)
190.
191.         if len(theChests) == 0:
192.             print('You have found all the sunken treasure chests!
                   Congratulations and good game!')
193.             break
194.
195.         sonarDevices -= 1
196.
197.     if sonarDevices == 0:
198.         print('We\'ve run out of sonar devices! Now we have to turn the
               ship around and head')
199.         print('for home with treasure chests still out there! Game
               over.')
200.         print('    The remaining chests were here:')
201.         for x, y in theChests:
202.             print('    %s, %s' % (x, y))
203.
204.     print('Do you want to play again? (yes or no)')
205.     if not input().lower().startswith('y'):
206.         sys.exit()
